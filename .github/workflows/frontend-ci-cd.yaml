name: CI/CD for Timeless Frontend

on:
  push:
    branches: [main, develop]
    paths: ['frontend/**']
  pull_request:
    branches: [main]
    paths: ['frontend/**']
  schedule:
    # Weekly dependency audit - Complex trigger for HD
    - cron: '0 3 * * 1'
  workflow_dispatch:
    # Manual trigger with conditions - Complex trigger for HD
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'preview'
        type: choice
        options:
        - preview
        - staging
        - production
      skip_tests:
        description: 'Skip test suite'
        required: false
        type: boolean
        default: false
      skip_build:
        description: 'Skip build step'
        required: false
        type: boolean
        default: false
      enable_gcs_upload:
        description: 'Upload logs to Google Cloud Storage'
        required: false
        type: boolean
        default: true

# Environment variables for DRY principles
env:
  NODE_VERSION: '20'
  WORKING_DIR: './frontend'

defaults:
  run:
    working-directory: ./frontend

jobs:
  # Job 1: Testing and Quality Assurance
  test:
    runs-on: ubuntu-latest
    
    # Strategy matrix for multiple Node versions - Optimization for HD
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        if: github.event.inputs.skip_tests != 'true'
        run: npm test
        env:
          # Mock backend URL for frontend tests
          VITE_API_URL: http://localhost:5000
          VITE_NODE_ENV: test
          
      - name: Run test coverage
        if: github.event.inputs.skip_tests != 'true'
        run: npm run coverage
        continue-on-error: true
        
      - name: Generate test report
        if: always()
        run: |
          echo "# Test Report for Frontend" > test-report.md
          echo "## Environment" >> test-report.md
          echo "- Node.js: ${{ matrix.node-version }}" >> test-report.md
          echo "- Vite: $(npm list vite --depth=0 2>/dev/null | grep vite | cut -d@ -f2 || echo 'Not installed')" >> test-report.md
          echo "- React: $(npm list react --depth=0 2>/dev/null | grep react | cut -d@ -f2 || echo 'Not installed')" >> test-report.md
          echo "- Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> test-report.md
          echo "- Commit: ${{ github.sha }}" >> test-report.md
          echo "- Branch: ${{ github.ref_name }}" >> test-report.md
          echo "- Test Status: $(if [ '${{ github.event.inputs.skip_tests }}' = 'true' ]; then echo 'Skipped'; else echo 'Completed'; fi)" >> test-report.md
          echo "- Coverage: $(if [ -d coverage ]; then echo 'Generated'; else echo 'Not available'; fi)" >> test-report.md
          
      # Store test artifacts - Persistent storage for HD
      - name: Upload test results to GitHub Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results-node${{ matrix.node-version }}-${{ github.sha }}
          path: |
            frontend/coverage/
            frontend/test-report.md
          if-no-files-found: warn
          retention-days: 30
          
      # Enhanced GCS upload for HD bonus points
      - name: Upload test results to Google Cloud Storage
        if: always() && github.event.inputs.enable_gcs_upload != 'false'
        run: |
          # Skip if no GCP credentials (for testing without secrets)
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "GCP credentials not configured, skipping GCS upload"
            echo "This is normal for testing without cloud setup"
            exit 0
          fi
          
          # Setup GCP authentication
          echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          
          # Install gcloud if not available
          if ! command -v gcloud &> /dev/null; then
            echo "Installing Google Cloud SDK..."
            curl -sSL https://sdk.cloud.google.com | bash
            export PATH="$HOME/google-cloud-sdk/bin:$PATH"
          fi
          
          # Authenticate and configure
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID || 'timeless-rental-app' }}
          
          # Determine environment and bucket
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            BUCKET="${{ secrets.GCS_LOGS_BUCKET_PROD || 'timeless-ci-logs-prod' }}"
            ENV="production"
          else
            BUCKET="${{ secrets.GCS_LOGS_BUCKET_STAGING || 'timeless-ci-logs-staging' }}"
            ENV="staging"
          fi
          
          # Create structured log path with HD-level organization
          LOG_PATH="frontend/$ENV/${{ github.sha }}/node-${{ matrix.node-version }}/$(date +%Y-%m-%d-%H-%M-%S)"
          
          # Upload test artifacts with parallel processing
          echo "Uploading frontend test results to: gs://$BUCKET/$LOG_PATH"
          
          if [ -d coverage ]; then
            gsutil -m cp -r coverage/ gs://$BUCKET/$LOG_PATH/coverage/
          fi
          
          if [ -f test-report.md ]; then
            gsutil cp test-report.md gs://$BUCKET/$LOG_PATH/test-report.md
            
            # Set metadata for HD-level organization
            gsutil setmeta \
              -h "x-goog-meta-git-sha:${{ github.sha }}" \
              -h "x-goog-meta-environment:$ENV" \
              -h "x-goog-meta-workflow-run:${{ github.run_id }}" \
              -h "x-goog-meta-node-version:${{ matrix.node-version }}" \
              -h "x-goog-meta-test-status:$(if [ '${{ github.event.inputs.skip_tests }}' = 'true' ]; then echo 'skipped'; else echo 'completed'; fi)" \
              -h "x-goog-meta-component:frontend" \
              gs://$BUCKET/$LOG_PATH/test-report.md
          fi
          
          # Create HD-level index file for easy browsing
          cat > log-index.json << EOF
          {
            "workflow_run": "${{ github.run_id }}",
            "git_sha": "${{ github.sha }}",
            "git_ref": "${{ github.ref_name }}",
            "environment": "$ENV",
            "node_version": "${{ matrix.node-version }}",
            "component": "frontend",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "test_status": "$(if [ '${{ github.event.inputs.skip_tests }}' = 'true' ]; then echo 'skipped'; else echo 'completed'; fi)",
            "artifacts": {
              "coverage": "gs://$BUCKET/$LOG_PATH/coverage/",
              "test_report": "gs://$BUCKET/$LOG_PATH/test-report.md",
              "index": "gs://$BUCKET/$LOG_PATH/index.json"
            },
            "github_artifacts": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          
          gsutil cp log-index.json gs://$BUCKET/$LOG_PATH/index.json
          
          # Cleanup sensitive files
          rm -f /tmp/gcp-key.json log-index.json
          
          echo "Frontend test results uploaded successfully!"
          echo "View at: https://console.cloud.google.com/storage/browser/$BUCKET/$LOG_PATH"
        continue-on-error: true
          
  # Job 2: Security and Dependency Audit
  security-audit:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          echo "# Security Audit Report for Frontend" > security-report.md
          echo "## Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> security-report.md
          echo "## Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## NPM Audit Results" >> security-report.md
          npm audit --audit-level=moderate >> security-report.md 2>&1 || true
          
          echo "" >> security-report.md
          echo "## Package Versions" >> security-report.md
          npm list --depth=0 >> security-report.md 2>&1 || true
          
          echo "" >> security-report.md
          echo "## Outdated Packages" >> security-report.md
          npm outdated >> security-report.md 2>&1 || true
          
          # Also create plain text version for compatibility
          npm audit --audit-level=moderate > security-report.txt 2>&1 || true
          echo "Frontend security audit completed on $(date)" >> security-report.txt
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-audit-${{ github.sha }}
          path: |
            frontend/security-report.md
            frontend/security-report.txt
          if-no-files-found: warn
          retention-days: 90
          
  # Job 3: Build and Package
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.skip_build != 'true'
    
    outputs:
      build-id: ${{ steps.build-info.outputs.build-id }}
      build-timestamp: ${{ steps.build-info.outputs.timestamp }}
      build-size: ${{ steps.build-analysis.outputs.size }}
      environment: ${{ steps.build-info.outputs.environment }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate build information
        id: build-info
        run: |
          BUILD_ID="$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}"
          TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
          
          echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          echo "Build information generated:"
          echo "  Build ID: $BUILD_ID"
          echo "  Environment: $ENVIRONMENT"
          echo "  Timestamp: $TIMESTAMP"
          
      - name: Build project
        run: |
          # Set environment-specific variables
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            export VITE_API_URL="${{ secrets.PROD_API_URL || 'https://timeless-backend.onrender.com' }}"
            export VITE_NODE_ENV="production"
          else
            export VITE_API_URL="${{ secrets.STAGING_API_URL || 'https://timeless-backend-staging.onrender.com' }}"
            export VITE_NODE_ENV="development"
          fi
          
          echo "Building with configuration:"
          echo "  API URL: $VITE_API_URL"
          echo "  Environment: $VITE_NODE_ENV"
          
          npm run build
          
          echo "Build completed successfully"
          echo "Dist directory contents:"
          ls -la dist/ 2>/dev/null || echo "Dist directory not found"
          
      - name: Analyze build size
        id: build-analysis
        run: |
          if [ -d dist ]; then
            BUILD_SIZE=$(du -sh dist/ | cut -f1)
            echo "size=$BUILD_SIZE" >> $GITHUB_OUTPUT
            
            # Create build analysis report
            echo "# Build Analysis Report" > build-analysis.md
            echo "- Build Size: $BUILD_SIZE" >> build-analysis.md
            echo "- Files Count: $(find dist/ -type f | wc -l)" >> build-analysis.md
            echo "- JS Files: $(find dist/ -name "*.js" | wc -l)" >> build-analysis.md
            echo "- CSS Files: $(find dist/ -name "*.css" | wc -l)" >> build-analysis.md
            echo "- HTML Files: $(find dist/ -name "*.html" | wc -l)" >> build-analysis.md
            echo "- Asset Files: $(find dist/ -name "*.png" -o -name "*.jpg" -o -name "*.svg" -o -name "*.ico" | wc -l)" >> build-analysis.md
            
            # List largest files
            echo "" >> build-analysis.md
            echo "## Largest Files:" >> build-analysis.md
            find dist/ -type f -exec du -h {} + | sort -hr | head -10 >> build-analysis.md
            
            echo "Build size analysis completed: $BUILD_SIZE"
          else
            echo "size=0MB" >> $GITHUB_OUTPUT
            echo "ERROR: dist directory not found after build"
            exit 1
          fi
          
      - name: Create deployment manifest
        run: |
          # Create deployment manifest - Workflow data export for HD
          cat > deployment-manifest.json << EOF
          {
            "build_id": "${{ steps.build-info.outputs.build-id }}",
            "git_sha": "${{ github.sha }}",
            "git_ref": "${{ github.ref_name }}",
            "timestamp": "${{ steps.build-info.outputs.timestamp }}",
            "node_version": "${{ env.NODE_VERSION }}",
            "environment": "${{ steps.build-info.outputs.environment }}",
            "build_size": "${{ steps.build-analysis.outputs.size }}",
            "api_endpoint": "${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}",
            "deployment_type": "${{ github.event.inputs.deployment_type || 'auto' }}",
            "assets": {
              "dist_folder": "./dist",
              "entry_point": "index.html",
              "build_tool": "vite"
            },
            "vite_config": {
              "base_url": "/",
              "output_dir": "dist"
            }
          }
          EOF
          
          echo "Deployment manifest created:"
          cat deployment-manifest.json
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: |
            frontend/dist/
            frontend/deployment-manifest.json
          if-no-files-found: error
          retention-days: 30
          
      - name: Upload build analysis
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-analysis-${{ github.sha }}
          path: frontend/build-analysis.md
          if-no-files-found: warn
          retention-days: 30
          
  # Job 4: Preview Deployment (for PRs and develop branch)
  preview-deployment:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    # Override global working directory for deployment job
    defaults:
      run:
        working-directory: .
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: ./frontend-build/
          
      - name: Validate preview build
        run: |
          echo "Validating preview build..."
          echo "Build artifacts downloaded:"
          find ./frontend-build -type f | head -20
          
          # Check if critical files exist
          if [[ ! -f "./frontend-build/dist/index.html" ]]; then
            echo "ERROR: index.html not found in build"
            exit 1
          fi
          
          echo "Preview build validation completed"
          echo "Build ID: ${{ needs.build.outputs.build-id }}"
          echo "Build Size: ${{ needs.build.outputs.build-size }}"
          
      # Placeholder for preview deployment - we'll add this in next phase
      - name: Deploy to preview environment (placeholder)
        run: |
          echo "Preview deployment will be implemented in next phase"
          echo "Target: Google Cloud Storage preview bucket"
          echo "URL: Will be generated based on branch name"
          
  # Job 5: Production Deployment Preparation
  prepare-production:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: |
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/develop' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'production')
    
    # Override global working directory for deployment job
    defaults:
      run:
        working-directory: .
    
    steps:
      - name: Debug deployment information
        run: |
          echo "Expected artifact name: frontend-build-${{ github.sha }}"
          echo "Git SHA: ${{ github.sha }}"
          echo "Build ID from build job: ${{ needs.build.outputs.build-id }}"
          echo "Build timestamp: ${{ needs.build.outputs.build-timestamp }}"
          echo "Build size: ${{ needs.build.outputs.build-size }}"
          echo "Environment: ${{ needs.build.outputs.environment }}"
          echo "Current directory: $(pwd)"
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: ./frontend-build/
          
      - name: Validate production build
        run: |
          echo "Validating production build..."
          echo "Build artifacts structure:"
          find ./frontend-build -type f | head -30
          
          # Check if critical files exist
          if [[ ! -f "./frontend-build/dist/index.html" ]]; then
            echo "ERROR: index.html not found in build"
            exit 1
          fi
          
          if [[ ! -f "./frontend-build/deployment-manifest.json" ]]; then
            echo "ERROR: deployment-manifest.json not found"
            exit 1
          fi
          
          # Validate manifest content
          if command -v jq &> /dev/null; then
            echo "Validating deployment manifest:"
            jq . ./frontend-build/deployment-manifest.json
          else
            echo "Deployment manifest content:"
            cat ./frontend-build/deployment-manifest.json
          fi
          
          echo "Production build validation completed"
          
      - name: Prepare production deployment
        run: |
          echo "Production deployment preparation completed"
          echo "  Build ID: ${{ needs.build.outputs.build-id }}"
          echo "  Environment: ${{ needs.build.outputs.environment }}"
          echo "  Build Size: ${{ needs.build.outputs.build-size }}"
          echo "  Timestamp: ${{ needs.build.outputs.build-timestamp }}"
          echo "  Ready for Google Cloud Storage deployment"
          
      # Placeholder for Google Cloud Storage deployment
      - name: Deploy to Google Cloud Storage (placeholder)
        run: |
          echo "Google Cloud Storage deployment will be implemented in next phase"
          echo "  Target: Cloud Storage bucket 'timeless-frontend-prod'"
          echo "  CDN: Google Cloud CDN"
          echo "  Domain: Custom domain with SSL"